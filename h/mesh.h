#ifndef __COOLWORK_MESH__
#define __COOLWORK_MESH__

#include <mathlib.h>

#pragma pack(push,1)

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рисуемая вершина
///////////////////////////////////////////////////////////////////////////////////////////////////
struct DrawVertex
{
  vec3f pos;   //положение в пространстве
  vec3f n;     //нормаль
  vec3f color; //цвет
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Треугольник
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Triangle
{
  size_t v [3]; //индексы вершин
};

#pragma pack(pop)

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ограничивающий ящик
///////////////////////////////////////////////////////////////////////////////////////////////////        
struct AABB
{
  vec3f min, max;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поверхность мэша
///////////////////////////////////////////////////////////////////////////////////////////////////
class Surface
{
  public:  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание / удаление
///////////////////////////////////////////////////////////////////////////////////////////////////  
    static Surface* create (size_t vertexes_count,size_t triangles_count);

    void release ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t      GetVertexesCount ();
    DrawVertex* GetVertexes      ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Треугольники
///////////////////////////////////////////////////////////////////////////////////////////////////      
    size_t     GetTrianglesCount ();    
    Triangle*  GetTriangles      ();    
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Преобразования поверхности
///////////////////////////////////////////////////////////////////////////////////////////////////
    void transform (const mat4f&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Ограничивающий ящик
///////////////////////////////////////////////////////////////////////////////////////////////////    
    const AABB& GetAABB       ();
    void        ComputeBounds ();

  private:    
    Surface  (size_t vertexes_count,size_t triangles_count);
    ~Surface ();

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Примитивы
///////////////////////////////////////////////////////////////////////////////////////////////////      
class Primitives
{
  public:
    enum { DEFAULT_SLICES = 15 };
  
    static Surface* CreateBox           (float width=1.0f,float height=1.0f,float depth=1.0f); //center at (0,0,0)
    static Surface* CreateCylinder      (float radius=1.0f,float height=1.0f,size_t slices=DEFAULT_SLICES);
    static Surface* CreateCone          (float radius=1.0f,float height=1.0f,size_t slices=DEFAULT_SLICES);
    static Surface* CreateClipCone      (float long_radius,float short_radius,float height,size_t slices=DEFAULT_SLICES);
    static Surface* CreateSphere        (float radius=1.0f,size_t parallels=DEFAULT_SLICES,size_t meridians=DEFAULT_SLICES);
    static Surface* CreateHalfCylinder  (float radius=1.0f,float height=1.0f,size_t slices=DEFAULT_SLICES);
    static Surface* CreateHalfCone      (float radius=1.0f,float height=1.0f,size_t slices=DEFAULT_SLICES);
    static Surface* CreateHalfClipCone  (float radius,float long_height,float short_height,size_t slices=DEFAULT_SLICES);
    static Surface* CreateHalfSphere    (float radius=1.0f,size_t parallels=DEFAULT_SLICES,size_t meridians=DEFAULT_SLICES);
    static Surface* CreateTetrahedron   (float radius=1.0f);
    static Surface* CreateHexahedron    (float radius=1.0f);
    static Surface* CreateOctahedron    (float radius=1.0f);
    static Surface* CreateDodecahedron  (float radius=1.0f);
    static Surface* CreateIcosahedron   (float radius=1.0f);
    static Surface* CreateTorus         (float ring_radius=1.0f,float pipe_radius=0.5f,size_t parallels=DEFAULT_SLICES,size_t meridians=DEFAULT_SLICES);
    static Surface* CreateHalfTorus     (float ring_radius=1.0f,float pipe_radius=0.5f,size_t parallels=DEFAULT_SLICES,size_t meridians=DEFAULT_SLICES);
};

#endif
