#ifndef __COOLWORK_COMMAND__
#define __COOLWORK_COMMAND__

#include <stddef.h>
#include <stdarg.h>
#include <etc.h>

//forward
class Command;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Аргументы команды
///////////////////////////////////////////////////////////////////////////////////////////////////
class CmdArgs
{
  friend class Command;
  public:    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Парсинг / сброс
///////////////////////////////////////////////////////////////////////////////////////////////////
    void parse   (const char*);
    void parsef  (const char*,...);
    void vparsef (const char*,va_list);
    void reset   ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество аргументов
///////////////////////////////////////////////////////////////////////////////////////////////////  
    size_t argc () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя команды
///////////////////////////////////////////////////////////////////////////////////////////////////      
    const char* tag () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Чтение аргумента
///////////////////////////////////////////////////////////////////////////////////////////////////          
    const char* gets  (size_t index) const;
    float       getf  (size_t index) const;
    int         geti  (size_t index) const;
    size_t      getui (size_t index) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Сдвиг нумерации параметров
///////////////////////////////////////////////////////////////////////////////////////////////////
    void shift (int offset);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Ссылки на командный интерпретатор и пул переменных
///////////////////////////////////////////////////////////////////////////////////////////////////    
    Command& command;
    Etc&     etc;

  private:    
    CmdArgs  (Command&);
    CmdArgs  (Command&,const char* cmd_line);
    ~CmdArgs ();

    void operator = (const CmdArgs&);   
  
  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Командный интерпритатор
///////////////////////////////////////////////////////////////////////////////////////////////////
class Command
{
  public:    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Пул переменных
///////////////////////////////////////////////////////////////////////////////////////////////////  
    Etc& etc ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Биндинг обработчиков
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef void (*static_cmd_handler)(CmdArgs&);

    void bind (const char* command,static_cmd_handler handler);
    
    template <class T>
    void bind (const char* command,T& obj,void (T::*)(CmdArgs&));
    
    void unbind (const char*);
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Исполнение команды
///////////////////////////////////////////////////////////////////////////////////////////////////
    void exec   (const char* command);
    void execf  (const char* format,...);
    void vexecf (const char* format,va_list);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Singleton
///////////////////////////////////////////////////////////////////////////////////////////////////    
    static Command& instance ();

  private:
    Command ();
    ~Command ();
    
    void operator = (const Command&);
    
    void _bind (const char*,void*,void*);
  
  private:
    struct Impl;
    Impl* impl;
};

template <class T>
void Command::bind (const char* command,T& obj,void (T::*fn)(CmdArgs&))
{
  union Dummy { 
    void (T::*handler)(CmdArgs&);
    void* dummy;
  };
  
  Dummy handler = {fn};

  _bind (command,&obj,handler.dummy);
}

#endif
