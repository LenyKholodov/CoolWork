#ifndef __COOLWORK_MATERIAL__
#define __COOLWORK_MATERIAL__

#include <stddef.h>
#include <mathlib.h>

///////////////////////////////////////////////////////////////////////////////////////////////////
///‘лаги материала
///////////////////////////////////////////////////////////////////////////////////////////////////
enum MtlFlags
{
  MATERIAL_WIREFRAME  = 1, //проволочна€ модель
  MATERIAL_TWO_SIDED  = 2, //двусторонний
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///÷вета материала
///////////////////////////////////////////////////////////////////////////////////////////////////
enum MaterialColor
{
  MATERIAL_EMISSION_COLOR, //цвет излучени€
  MATERIAL_AMBIENT_COLOR,  //поглощЄнна€ составл€юща€
  MATERIAL_DIFFUSE_COLOR,  //рассе€на€ составл€юща€  
  MATERIAL_SPECULAR_COLOR, //отражЄнна€ составл€юща€  
  
  MATERIAL_COLORS_NUM
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///–ежим блендинга
///////////////////////////////////////////////////////////////////////////////////////////////////
enum BlendMode
{
  MATERIAL_BLEND_SOLID,  //блендинг отсутствует
  MATERIAL_BLEND_ADD,    //сложение цветов
  MATERIAL_BLEND_FILTER  //фильтр
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///ћатериал
///////////////////////////////////////////////////////////////////////////////////////////////////
class Material
{  
  public:  
    Material  ();
    ~Material ();      
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///»м€
///////////////////////////////////////////////////////////////////////////////////////////////////    
    void        rename (const char*);
    const char* name   ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///‘лаги материала
///////////////////////////////////////////////////////////////////////////////////////////////////  
    void enable    (size_t flags);
    void disable   (size_t flags);
    bool IsEnabled (size_t flags);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///”становление цвета материала
///////////////////////////////////////////////////////////////////////////////////////////////////
    void         SetColor     (MaterialColor,const vec3f&);
    void         SetShininess (float shininess);
    const vec3f& GetColor     (MaterialColor);    
    float        GetShininess ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Ѕлендинг
///////////////////////////////////////////////////////////////////////////////////////////////////    
    void      SetBlend        (BlendMode,float alpha);
    void      SetBlendMode    (BlendMode);    
    void      SetTransparency (float alpha);
    float     GetTransparency ();
    BlendMode GetBlendMode    ();

  private:
    void RegisterVars ();
    void UnregisterVars ();

  private:
    struct Impl;
    Impl* impl;
};

#endif
