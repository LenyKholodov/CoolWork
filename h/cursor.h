#ifndef __COOLWORK_RENDER_CURSOR__
#define __COOLWORK_RENDER_CURSOR__

#include <render.h>

//forwards
class RenderCursor;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Манипулятор
///////////////////////////////////////////////////////////////////////////////////////////////////
class Manipulator
{
  public:
            Manipulator  (RenderCursor&);
    virtual ~Manipulator ();
  
    virtual void process (int x,int y) {}
    virtual void accept  () {}
    virtual void select  () {}
    virtual void idle    () {}
    
  protected:
    void finish ();

  protected:
    RenderCursor& cursor;    
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Средство работы со сценой
///////////////////////////////////////////////////////////////////////////////////////////////////
class RenderCursor
{
  friend class Manipulator;
  public:
    RenderCursor  (Render&);
    ~RenderCursor ();        
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Позиция курсора
///////////////////////////////////////////////////////////////////////////////////////////////////    
    void  SetPosition (int x,int y);
    vec2i GetPosition ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Начало действия / подтверждение действия / отмена текущего действия
///////////////////////////////////////////////////////////////////////////////////////////////////
    void BeginAction  ();
    void AcceptAction ();
    void CancelAction ();
    void IdleAction   ();
    bool IsActive     ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с манипуляторами
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef Manipulator* (*create_manipulator_func)(RenderCursor&,const char* manipulator_name);

    void        SetManipulator (const char* name);
    const char* GetManipulator ();
    bool        IsDefaultManipulator ();
    
    void RegisterManipulator   (const char* name,create_manipulator_func);
    void UnregisterManipulator (const char* name);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Текущая область просмотра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void      SetActiveViewport (const char*);
    void      SetActiveViewport (Viewport*);
    Viewport* GetActiveViewport ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Текущая сцена
///////////////////////////////////////////////////////////////////////////////////////////////////    
    Scene* GetActiveScene (); //зависит от области просмотра
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Выделенные объекты
///////////////////////////////////////////////////////////////////////////////////////////////////            
    void              SelectEntity   (Entity*);
    void              SelectEntities (size_t count,Entity**);
    void              SelectEntities (const EntityList&);
    void              ClearSelection ();
    const EntityList& GetSelection   ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Выделение объектов находящихся в указанной области 
///////////////////////////////////////////////////////////////////////////////////////////////////                    
    void NewSelection (int x,int y,int width=2,int height=2);
    void NewSelection ();    

  private:
    struct Impl;    
    Impl* impl;
};

#endif
