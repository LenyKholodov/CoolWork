#ifndef __COOL_WORK__
#define __COOL_WORK__

#include <scene.h>

///////////////////////////////////////////////////////////////////////////////////////////////////
///Прямоугольник
///////////////////////////////////////////////////////////////////////////////////////////////////
class Rect
{
  public:
    Rect ();
    Rect (int x,int y,int width,int height);
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры
///////////////////////////////////////////////////////////////////////////////////////////////////  
    int left   () const { return rect_left;   }
    int top    () const { return rect_top;    }
    int right  () const { return rect_right;  }
    int bottom () const { return rect_bottom; }
    int width  () const { return abs (rect_right - rect_left); }
    int height () const { return abs (rect_bottom - rect_top); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка принадлежности точки
///////////////////////////////////////////////////////////////////////////////////////////////////          
    bool test (int x,int y) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка области на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////              
    bool empty () const { return !width () || !height (); }
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка
///////////////////////////////////////////////////////////////////////////////////////////////////              
    void set (int x,int y,int width,int height);
  
  private:  
    int rect_left, rect_right, rect_top, rect_bottom;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ViewportFlags
{
  VIEWPORT_VISIBLE   = 1, //отрисовка сцены включена
  VIEWPORT_WIREFRAME = 2, //сцена рисуется в каркасном представлении
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Предварительное преобразоване вида
///////////////////////////////////////////////////////////////////////////////////////////////////
enum View
{
  VIEW_FRONT,
  VIEW_BACK,
  VIEW_LEFT,
  VIEW_RIGHT,
  VIEW_TOP,
  VIEW_BOTTOM
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги выбора
///////////////////////////////////////////////////////////////////////////////////////////////////
enum SelectFlags
{
  SELECT_OBJECTS = 1, //выбирать объекты
  SELECT_HELPERS = 2, //выбирать хэлперы
  SELECT_ALL     = SELECT_OBJECTS|SELECT_HELPERS
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class Viewport
{
  friend class  Render;
  friend struct RenderImpl;
  public:  
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя
///////////////////////////////////////////////////////////////////////////////////////////////////  
    void        rename (const char* name);
    const char* name   ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Границы области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    int left   ();
    int top    ();
    int right  ();
    int bottom ();
    int width  ();
    int height ();

    bool IsInViewport (int x,int y); //проверка принадлежности точки области отсечения
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Активность
///////////////////////////////////////////////////////////////////////////////////////////////////    
    void activate ();
    bool IsActive ();    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединённая камера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void    SetView   (Camera*);
    void    SetView   (Scene*,View view);
    Camera* GetCamera ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////    
    void enable    (size_t flags);
    void disable   (size_t flags);
    bool IsEnabled (size_t flags);    
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Перерисовка
///////////////////////////////////////////////////////////////////////////////////////////////////      
    void repaint ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Выбор объектов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void select (EntityList& result,int x,int y,int width,int height,size_t flags=SELECT_ALL);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Размер сетки и количество делений
///////////////////////////////////////////////////////////////////////////////////////////////////    
    void SetGrid       (const vec3f& pos,const vec3f& dir);
    void SetGridSlices (size_t slices);
    void SetGridSize   (const vec2f&);

    const vec3f&  GetGridPos    ();
    const vec3f&  GetGridDir    ();
    const vec2f&  GetGridSize   ();
    size_t        GetGridSlices ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Область выделения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetSelectRect (int x,int y,int width,int height);
    const Rect& GetSelectRect ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Внутрення сцена хэлперов для области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////    
    Scene* GetHelperScene ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Проецирование точки экрана на сетку
///////////////////////////////////////////////////////////////////////////////////////////////////        
    vec3f ProjectPointOnGrid  (int screen_x,int screen_y);
    vec3f ProjectPointOnPlane (int screen_x,int screen_y,const vec3f& pos,const vec3f& dir);
    vec3f ProjectPointOnPlane (int screen_x,int screen_y,const mat4f& object_tm);

    vec2f ProjectWorldPoint   (const vec3f&);
    
  private:
    Viewport  ();
    ~Viewport ();
    
    void resize (int,int,int,int);
    
    void    SetRender (Render*);
    Render* GetRender ();
  
  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим показа областей просмотра
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ViewportMode
{
  RENDER_SINGLE_VIEWPORT_MODE, //одна область просмотра
  RENDER_MULTI_VIEWPORT_MODE   //несколько областей просмотра
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рендер
///////////////////////////////////////////////////////////////////////////////////////////////////
class Render
{
  friend class Viewport;
  public:        
    enum { VIEWPORTS_COUNT = 4 };
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание рендера
///////////////////////////////////////////////////////////////////////////////////////////////////    
    static Render* create ();
    
    void release ();
    void addref  ();   
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка окна рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////        
    bool SetWindow (void* window_handle); //HWND

///////////////////////////////////////////////////////////////////////////////////////////////////
///Изменение размеров окна
///////////////////////////////////////////////////////////////////////////////////////////////////                   
    void        SetWindowRect (int left,int top,int width,int height);
    const Rect& GetWindowRect ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление сплитером
///   SetSplit автоматически переводит рендер в режим RENDER_MULTI_VIEWPORT_MODE
///////////////////////////////////////////////////////////////////////////////////////////////////           
    void         SetSplit        (int x,int y); 
    void         SetViewportMode (ViewportMode mode);
    ViewportMode GetViewportMode ();    
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////               
    Viewport* viewport     (size_t index);
    Viewport* FindViewport (const char* name);
    Viewport* FindViewport (int x,int y);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Выбор активной области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void      SetActiveViewport (Viewport*);
    void      SetActiveViewport (int x,int y);
    Viewport* GetActiveViewport ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Рисование сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
    void repaint (); //перерисовка всех областей вывода

  private:      
    Render  ();
    ~Render ();      
    
    bool activate ();
  
  private:
    struct RenderImpl* impl;
};

#endif
